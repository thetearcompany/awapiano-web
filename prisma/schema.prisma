// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  bio           String?
  location      String?
  website       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts  Account[]
  sessions  Session[]
  posts     Post[]
  comments  Comment[]
  likes     Like[]
  followers Follows[] @relation("following")
  following Follows[] @relation("follower")
  tracks    Track[]
  articles  Article[]
  orders    Order[]
}

enum UserRole {
  USER
  CREATOR
  ADMIN
  SUPER_ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Community
model Post {
  id        String   @id @default(cuid())
  content   String
  mediaUrl  String?
  mediaType String?
  published Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]
  tags     Tag[]     @relation("PostToTag")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  userId    String
  parentId  String?

  // Relations
  post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: SetNull)
  replies Comment[] @relation("CommentToComment")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  postId    String
  userId    String

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model Follows {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  // Relations
  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members GroupMember[]
  tags    Tag[]         @relation("GroupToTag")
}

model GroupMember {
  id        String   @id @default(cuid())
  groupId   String
  userId    String
  role      String   @default("MEMBER") // MEMBER, MODERATOR, ADMIN
  createdAt DateTime @default(now())

  // Relations
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())

  // Relations
  posts      Post[]     @relation("PostToTag")
  groups     Group[]    @relation("GroupToTag")
  articles   Article[]  @relation("ArticleToTag")
  tracks     Track[]    @relation("TrackToTag")
  categories Category[] @relation("CategoryToTag")
  products   Product[]  @relation("ProductToTag")
}

// Content
model Article {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  excerpt     String?
  content     String
  coverImage  String?
  published   Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String
  categoryId  String?

  // Relations
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id])
  tags     Tag[]     @relation("ArticleToTag")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  parentId    String?

  // Relations
  articles Article[]
  parent   Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToCategory")
  tags     Tag[]      @relation("CategoryToTag")
}

// Music
model Track {
  id          String   @id @default(cuid())
  title       String
  description String?
  audioUrl    String
  coverImage  String?
  duration    Int      @default(0) // in seconds
  bpm         Int?
  key         String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  artistId    String
  albumId     String?

  // Relations
  artist    User       @relation(fields: [artistId], references: [id], onDelete: Cascade)
  album     Album?     @relation(fields: [albumId], references: [id])
  playlists Playlist[] @relation("PlaylistToTrack")
  tags      Tag[]      @relation("TrackToTag")
  playbacks Playback[]
  products  Product[]  @relation("ProductToTrack")
}

model Album {
  id          String    @id @default(cuid())
  title       String
  description String?
  coverImage  String?
  releaseDate DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  tracks Track[]
}

model Playlist {
  id          String   @id @default(cuid())
  title       String
  description String?
  coverImage  String?
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tracks Track[] @relation("PlaylistToTrack")
}

model Playback {
  id        String   @id @default(cuid())
  trackId   String
  userId    String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)
}

// Radio
model StreamMetadata {
  id          String   @id @default(cuid())
  title       String
  artist      String?
  album       String?
  genre       String?
  year        String?
  bitrate     Int?
  listeners   Int      @default(0)
  isLive      Boolean  @default(true)
  lastUpdated DateTime @updatedAt
  createdAt   DateTime @default(now())
}

model RadioShow {
  id            String   @id @default(cuid())
  title         String
  description   String?
  imageUrl      String?
  startTime     DateTime
  endTime       DateTime
  isRecurring   Boolean  @default(false)
  recurringDays String? // e.g. "1,2,3,4,5" for weekdays
  hostId        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  episodes RadioEpisode[]
}

model RadioEpisode {
  id          String   @id @default(cuid())
  title       String
  description String?
  audioUrl    String?
  imageUrl    String?
  airDate     DateTime
  duration    Int      @default(0) // in seconds
  isLive      Boolean  @default(false)
  showId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  show RadioShow @relation(fields: [showId], references: [id], onDelete: Cascade)
}

// Shop
model Product {
  id          String   @id @default(cuid())
  title       String
  description String?
  price       Float
  salePrice   Float?
  inventory   Int      @default(0)
  imageUrl    String?
  type        String // BEAT, SAMPLE_PACK, MERCH, VINYL
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tags       Tag[]       @relation("ProductToTag")
  orderItems OrderItem[]
  tracks     Track[]     @relation("ProductToTrack")
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  status        OrderStatus @default(PENDING)
  total         Float
  paymentId     String?
  paymentMethod String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items OrderItem[]
}

enum OrderStatus {
  PENDING
  PAID
  FULFILLED
  CANCELLED
  REFUNDED
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Analytics
model PageView {
  id        String   @id @default(cuid())
  path      String
  userId    String?
  ipAddress String?
  userAgent String?
  referrer  String?
  createdAt DateTime @default(now())
}

model Event {
  id        String   @id @default(cuid())
  name      String
  data      String?
  userId    String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
}
