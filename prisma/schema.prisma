// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  bio           String?
  location      String?
  website       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts    Account[]
  sessions    Session[]
  posts       Post[]
  comments    Comment[]
  likes       Like[]
  followers   Follows[]    @relation("follower")
  following   Follows[]    @relation("following")
  submissions Submission[]
  feedback    Feedback[]
  trackLikes  TrackLike[]
  cartItems   CartItem[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Community
model Post {
  id        String   @id @default(cuid())
  content   String
  mediaUrl  String?
  mediaType String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]

  @@index([userId])
}

model Comment {
  id              String   @id @default(cuid())
  content         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String
  postId          String
  parentCommentId String?

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentComment Comment?  @relation("CommentToComment", fields: [parentCommentId], references: [id], onDelete: SetNull)
  childComments Comment[] @relation("CommentToComment")
  likes         Like[]

  @@index([userId])
  @@index([postId])
  @@index([parentCommentId])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String?
  commentId String?

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@index([userId])
  @@index([postId])
  @@index([commentId])
}

model Follows {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  // Relations
  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members GroupMember[]
}

model GroupMember {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@index([userId])
  @@index([groupId])
}

// Audio and Content
model Track {
  id          String    @id @default(cuid())
  title       String
  artist      String
  coverImage  String?
  audioUrl    String
  duration    Int
  releaseDate DateTime?
  album       String?
  genre       String?
  bpm         Int?
  key         String?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  likes     TrackLike[]
  playlists PlaylistTrack[]
}

model TrackLike {
  id        String   @id @default(cuid())
  userId    String
  trackId   String
  createdAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([userId, trackId])
  @@index([userId])
  @@index([trackId])
}

model Playlist {
  id          String   @id @default(cuid())
  title       String
  description String?
  coverImage  String?
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatorId   String

  // Relations
  tracks PlaylistTrack[]

  @@index([creatorId])
}

model PlaylistTrack {
  id         String   @id @default(cuid())
  playlistId String
  trackId    String
  order      Int
  addedAt    DateTime @default(now())

  // Relations
  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  track    Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([playlistId, trackId])
  @@index([playlistId])
  @@index([trackId])
}

model RadioShow {
  id          String   @id @default(cuid())
  title       String
  description String?
  hostName    String
  hostImage   String?
  startTime   String
  endTime     String
  day         String
  isLive      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Episode {
  id          String   @id @default(cuid())
  title       String
  description String?
  image       String?
  audioUrl    String
  duration    Int
  releaseDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Content
model Article {
  id         String   @id @default(cuid())
  title      String
  content    String
  excerpt    String?
  image      String?
  readTime   String?
  authorId   String
  categoryId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  category Category     @relation(fields: [categoryId], references: [id])
  tags     ArticleTag[]

  @@index([authorId])
  @@index([categoryId])
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  articles Article[]
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  articles ArticleTag[]
}

model ArticleTag {
  id        String   @id @default(cuid())
  articleId String
  tagId     String
  createdAt DateTime @default(now())

  // Relations
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([articleId, tagId])
  @@index([articleId])
  @@index([tagId])
}

// Talent
model Submission {
  id            String   @id @default(cuid())
  title         String
  description   String
  type          String
  audioUrl      String
  coverImageUrl String?
  duration      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String

  // Relations
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  feedback Feedback[]
  tags     SubmissionTag[]

  @@index([userId])
}

model Feedback {
  id                String   @id @default(cuid())
  rating            Int
  comment           String
  originality       Int?
  productionQuality Int?
  arrangement       Int?
  danceability      Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  submissionId      String

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([submissionId])
}

model SubmissionTag {
  id           String   @id @default(cuid())
  submissionId String
  tag          String
  createdAt    DateTime @default(now())

  // Relations
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([submissionId, tag])
  @@index([submissionId])
}

// Shop
model Product {
  id              String    @id @default(cuid())
  title           String
  description     String
  price           Float
  originalPrice   Float?
  coverImage      String?
  category        String
  bpm             Int?
  key             String?
  duration        String?
  audioPreviewUrl String?
  releaseDate     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  artistId        String?

  // Relations
  tags      ProductTag[]
  cartItems CartItem[]
  reviews   ProductReview[]

  @@index([artistId])
}

model ProductTag {
  id        String   @id @default(cuid())
  productId String
  tag       String
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, tag])
  @@index([productId])
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  productId String

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
}

model ProductReview {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  productId String

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
}
